generator client {
  provider          = "prisma-client-js"
  previewFeatures   = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map("compound_id")
  userId             Int       @map("user_id")
  providerType       String    @map("provider_type")
  providerId         String    @map("provider_id")
  providerAccountId  String    @map("provider_account_id")
  refreshToken       String?   @map("refresh_token")
  accessToken        String?   @map("access_token")
  accessTokenExpires DateTime? @map("access_token_expires")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @default(now()) @map("updated_at")

  @@index([providerAccountId], map: "providerAccountId")
  @@index([providerId], map: "providerId")
  @@index([userId], map: "userId")
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  expires      DateTime
  sessionToken String   @unique @map("session_token")
  accessToken  String   @unique @map("access_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")

  @@map("sessions")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?   @unique
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @map("updated_at")
  bio           String?
  comments      Comment[]
  followers     Follows[] @relation("follower")
  following     Follows[] @relation("following")
  posts         Post[]
  likes         Post[]    @relation("likes")

  @@map("users")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  @@map("verification_requests")
}

model Follows {
  followerId  Int
  followingId Int
  follower    User @relation("follower", fields: [followerId], references: [id])
  following   User @relation("following", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String
  content     String
  description String
  published   Boolean   @default(false)
  authorId    Int
  images      String[]
  author      User      @relation(fields: [authorId], references: [id])
  comments    Comment[]
  tags        Tag[]
  likes       User[]    @relation("likes")
}

model Tag {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  imgSrc String?
  posts  Post[]
}

model Comment {
  id        Int       @id @default(autoincrement())
  message   String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  userId    Int
  postId    Int
  parentId  Int?
  parent    Comment?  @relation("commentParent", fields: [parentId], references: [id], onDelete: Cascade)
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("commentParent")
}
