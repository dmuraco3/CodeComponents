// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 Int       @default(autoincrement()) @id
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")

  @@map(name: "accounts")
}

model Session {
  id           Int      @default(autoincrement()) @id
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model User {
  id            Int       @default(autoincrement()) @id
  name          String?   @unique
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
  followers     Follows[] @relation("follower")
  following     Follows[] @relation("following")
  posts         Post[]
  likes         Post[]    @relation("likes")
  comments      Comment[] 

  @@map(name: "users")
}

model VerificationRequest {
  id         Int      @default(autoincrement()) @id
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime  @default(now()) @map(name: "created_at")
  updatedAt  DateTime  @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model Follows {
  follower    User @relation("follower", fields: [followerId], references: [id])
  followerId  Int
  following   User @relation("following", fields: [followingId], references: [id])
  followingId Int

  @@id([followerId, followingId])
}


model Post {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  description String
  published   Boolean  @default(false)
  author      User     @relation(fields: [authorId], references: [id])
  images      String[]
  authorId    Int
  likes       User[]  @relation("likes")
  tags        Tag[]
  comments    Comment[]
}

model Tag {
  id      Int    @id @default(autoincrement())
  name    String @unique
  imgSrc  String? 
  posts   Post[]
}

model Comment {
  id         Int        @id @default(autoincrement())
  message    String 
  createdAt  DateTime   @default(now()) @map(name: "created_at")
  updatedAt  DateTime   @default(now()) @map(name: "updated_at")
  user       User       @relation(fields: [userId], references: [id])
  userId     Int
  post       Post       @relation(fields: [postId], references: [id])
  postId     Int 
  parentId   Int?
  parent     Comment?   @relation("commentParent", fields: [parentId], references: [id])
  replies    Comment[]  @relation("commentParent")
}